#!/usr/bin/perl

# Created on: 2018-02-08 12:32:33
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util;
use List::MoreUtils qw/zip/;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Path::Tiny;
use JSON::XS qw/decode_json/;
use DateTime;
use DateTime::TimeZone;
use Term::ANSIColor qw/colored/;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    timezone   => DateTime::TimeZone->new( name => "local" )->name,
    max_events => 20,
    sleep      => 10,
    verbose    => 0,
    man        => 0,
    help       => 0,
    VERSION    => 0,
);

if ( !@ARGV ) {
    pod2usage( -verbose => 1 );
}

main();
exit 0;

sub main {
    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'between|b=s',
        'child|child-stacks|c!',
        'max_events|max-events|m=i',
        'reverse|r',
        'sleep|s=i',
        'stack_name|stack-name|n=s@',
        'timezone|t=s',
        'watch|w!',
        'wait|W!',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    my %seen;
    my @fields = qw/Time Status ResourceType LogicalResourceId/;
    push @fields, 'ResourceStatusReason' if $option{verbose};
    my %max       = map { $_ => length $_ } @fields;
    my @datefilds = qw/year month day hour minute second/;
    my $describe  = "aws cloudformation describe-stacks";
    my $wait      = $option{wait};
    my $last_stack;
    my $first = 1;

    while ( $first || $option{watch} ) {
        $first = 0;
        my $start = time;
        if ( $option{child} ) {
            my @names;
            for my $stack_name (@{ $option{stack_name} }) {
                my $parent_id = `$describe --stack-name $stack_name --query 'Stacks[].StackId' --output text 2>&1`;
                if ( $parent_id =~ /An error occurred/ ) {
                    warn "Removing $stack_name as it doesn't appear to exist (any more at least)\n";
                    next;
                }
                chomp $parent_id;
                my @children  = split /\s+/xms, ''.`$describe --query 'Stacks[?ParentId==\`$parent_id\`].StackName' --output text 2>/dev/null`;
                push @names, $stack_name, @children;
            }

            if ( ! @names ) {
                warn "No stacks left\n";
                $wait ? next : last;
            }
            $wait = 0;

            $option{stack_name} = \@names;
        }

        my $count = ! $last_stack ? 0 : 1;

        for my $stack_name (@{ $option{stack_name} }) {
            my $events = get_events($stack_name, $option{max_events});
            my %new_max = %max;

            for my $event (@{ $events->{StackEvents} }) {
                my @time = (split /\D/, $event->{Timestamp})[0 .. 5];
                my $date = DateTime->new((zip @datefilds, @time), time_zone => "UTC")->set_time_zone($option{timezone});
                $event->{Time} = $date->hms;
                $event->{Day} = $date->ymd;

                $event->{Status} = $event->{ResourceStatus};
                $event->{Status} =~ s/_IN_PROGRESS$/_.../ if length $event->{Status} > 27;
                $event->{ResourceType} =~ s/^AWS::CloudFormation/A::C/ if length $event->{ResourceType} > 24;

                for my $field (@fields) {
                    $event->{$field} //= '';
                    $new_max{$field} = length $event->{$field} if $new_max{$field} < length $event->{$field};
                }
            }

            $new_max{$fields[-1]} = 1;
            my $changed = $count++ ? 0 : 1;
            for my $key (keys %max) {
                $changed++ if $new_max{$key} != $max{$key};
            }
            %max = %new_max;
            my $fmt_head = (join '  ', (map {"%-$max{$_}s"} @fields));

            # add non-printing colour number
            $max{Status} += 9;
            my $fmt = (join '  ', (map {"%-$max{$_}s"} @fields));
            my $last_day = '';
            my $event_count = 0;

            for my $event (@{ $events->{StackEvents} }) {
                # TODO memory leak issue here, need to work out how to remove old events
                next if $seen{$stack_name}{$event->{EventId}}++;

                if ( ! $event_count++ ) {
                    if ( @{ $option{stack_name } } > 1 && ( ! $last_stack || $last_stack ne $stack_name ) ) {
                        print "\033[999D\033[K" . colored(['bold'], $stack_name), "\n";
                    }
                    if ($changed) {
                        print "\033[999D\033[K" . colored(['bold'], sprintf $fmt_head, @fields), "\n";
                    }
                }

                my $colour = $event->{ResourceStatus} =~ /_IN_PROGRESS$/ ? 'bright_yellow'
                    : $event->{ResourceStatus} =~ /_COMPLETE$/           ? 'green'
                    : $event->{ResourceStatus} =~ /_FAILED$/             ? 'red'
                    :                                                      '';

                if ( $event->{Day} ne $last_day ) {
                    print "\033[999D\033[K$event->{Day}\n";
                    $last_day = $event->{Day};
                }

                printf "$fmt\n", map {/Status/ ? colored([$colour], $event->{$_}) : $event->{$_}} @fields;
                if ( $option{verbose} > 1 && $event->{ResourceProperties} ) {
                    local $Data::Dumper::Sortkeys = 1;
                    local $Data::Dumper::Indent   = 1;
                    print Dumper decode_json($event->{ResourceProperties});
                }
            }
            $last_stack = $stack_name;
        }

        # sleep if watching and if we would sleep for some time
        if ( $option{watch} && ( $option{sleep} - (time - $start) > 0) ) {
            sleep $option{sleep} - (time - $start);
            print {*STDERR} '.';
        }


    }

    return;
}

sub get_events {
    my ($stack_name, $max_items) = @_;

    my @cmd = qw/aws cloudformation describe-stack-events/;
    if ( defined $stack_name ) {
        push @cmd, '--stack-name', $stack_name;
    }
    if ( defined $max_items ) {
        push @cmd, '--max-items', $max_items;
    }

    my $cmd    = join ' ', @cmd;
    my $json   = `$cmd 2>/dev/null`;
    my $events = eval {
        decode_json($json);
    } or do {
        warn "Error procesing JSON: $@\n" if $option{verbose} > 1;
        return { StackEvents => [] };
    };

    while ( my $next_token = $events->{NextToken} ) {
        $json = `$cmd --starting-token $next_token`;
        my $next = decode_json($json);
        push @{ $events->{StackEvents} }, @{ $next->{StackEvents} };
        $events->{NextToken} = $next->{NextToken};
        last if $option{max_events} && @{ $events->{StackEvents} } >= $option{max_events};
    }

    if ( @{ $events->{StackEvents} } > $option{max_events} ) {
        @{ $events->{StackEvents} } = @{ $events->{StackEvents} }[0 .. $option{max_events}];
    }

    return $option{watch} || $option{reverse} ? { StackEvents => [ reverse @{$events->{StackEvents}} ] }: $events;
}

__DATA__

=head1 NAME

aws-cf-events - List AWS CloudFormation stack events (similar to the way they are shown in the AWS console)

=head1 VERSION

This documentation refers to aws-cf-events version 0.0.1

=head1 SYNOPSIS

   aws-cf-events [option]

 OPTIONS:
  -b --between[=]start:end
                    Show events between start and end date/times
  -c --child-stacks Find child stacks of stacks specified in --stack-name
  -m --max-events[=]int
                    Show at most this number of events in the past
                    (Default 20)
  -n --stack-name[=]str
                    The name of the stack to show events for, you can specify
                    this option more than once to see multiple stack events.
  -s --sleep[=]int  When watching this is the time to sleep between checking
                    for more events (Default 10, in seconds)
  -w --watch        Rather than just listing the stack events, keep showing
                    any new events for the stack as they arrive.

  -v --verbose      Show reason for the stack event
     --version      Prints the version information
     --help         Prints this help information
     --man          Prints the full documentation for aws-cf-events

=head1 DESCRIPTION

B<Note> This command uses the C<aws> CLI application to do the API calls.

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2018 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
